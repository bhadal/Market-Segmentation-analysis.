{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "810d4cd6",
   "metadata": {},
   "source": [
    "# Market segmentation analysis"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0b7ed724",
   "metadata": {},
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "4e9e33b2",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np # linear algebra\n",
    "import pandas as pd   # data processing \n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "26bbe8a8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>yummy</th>\n",
       "      <th>convenient</th>\n",
       "      <th>spicy</th>\n",
       "      <th>fattening</th>\n",
       "      <th>greasy</th>\n",
       "      <th>fast</th>\n",
       "      <th>cheap</th>\n",
       "      <th>tasty</th>\n",
       "      <th>expensive</th>\n",
       "      <th>healthy</th>\n",
       "      <th>disgusting</th>\n",
       "      <th>Like</th>\n",
       "      <th>Age</th>\n",
       "      <th>VisitFrequency</th>\n",
       "      <th>Gender</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>No</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>-3</td>\n",
       "      <td>61</td>\n",
       "      <td>Every three months</td>\n",
       "      <td>Female</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>+2</td>\n",
       "      <td>51</td>\n",
       "      <td>Every three months</td>\n",
       "      <td>Female</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>No</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>+1</td>\n",
       "      <td>62</td>\n",
       "      <td>Every three months</td>\n",
       "      <td>Female</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>Yes</td>\n",
       "      <td>+4</td>\n",
       "      <td>69</td>\n",
       "      <td>Once a week</td>\n",
       "      <td>Female</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>No</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>+2</td>\n",
       "      <td>49</td>\n",
       "      <td>Once a month</td>\n",
       "      <td>Male</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  yummy convenient spicy fattening greasy fast cheap tasty expensive healthy  \\\n",
       "0    No        Yes    No       Yes     No  Yes   Yes    No       Yes      No   \n",
       "1   Yes        Yes    No       Yes    Yes  Yes   Yes   Yes       Yes      No   \n",
       "2    No        Yes   Yes       Yes    Yes  Yes    No   Yes       Yes     Yes   \n",
       "3   Yes        Yes    No       Yes    Yes  Yes   Yes   Yes        No      No   \n",
       "4    No        Yes    No       Yes    Yes  Yes   Yes    No        No     Yes   \n",
       "\n",
       "  disgusting Like  Age      VisitFrequency  Gender  \n",
       "0         No   -3   61  Every three months  Female  \n",
       "1         No   +2   51  Every three months  Female  \n",
       "2         No   +1   62  Every three months  Female  \n",
       "3        Yes   +4   69         Once a week  Female  \n",
       "4         No   +2   49        Once a month    Male  "
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Import dataset\n",
    "df = pd.read_csv('fast_food.txt')\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "e7b7657d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>yummy</th>\n",
       "      <th>convenient</th>\n",
       "      <th>spicy</th>\n",
       "      <th>fattening</th>\n",
       "      <th>greasy</th>\n",
       "      <th>fast</th>\n",
       "      <th>cheap</th>\n",
       "      <th>tasty</th>\n",
       "      <th>expensive</th>\n",
       "      <th>healthy</th>\n",
       "      <th>disgusting</th>\n",
       "      <th>Like</th>\n",
       "      <th>Age</th>\n",
       "      <th>VisitFrequency</th>\n",
       "      <th>Gender</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>No</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>-3</td>\n",
       "      <td>61</td>\n",
       "      <td>Every three months</td>\n",
       "      <td>Female</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>+2</td>\n",
       "      <td>51</td>\n",
       "      <td>Every three months</td>\n",
       "      <td>Female</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>No</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>+1</td>\n",
       "      <td>62</td>\n",
       "      <td>Every three months</td>\n",
       "      <td>Female</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>Yes</td>\n",
       "      <td>+4</td>\n",
       "      <td>69</td>\n",
       "      <td>Once a week</td>\n",
       "      <td>Female</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>No</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>+2</td>\n",
       "      <td>49</td>\n",
       "      <td>Once a month</td>\n",
       "      <td>Male</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>+2</td>\n",
       "      <td>55</td>\n",
       "      <td>Every three months</td>\n",
       "      <td>Male</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>+2</td>\n",
       "      <td>56</td>\n",
       "      <td>Every three months</td>\n",
       "      <td>Female</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>I love it!+5</td>\n",
       "      <td>23</td>\n",
       "      <td>Once a week</td>\n",
       "      <td>Female</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>Yes</td>\n",
       "      <td>I hate it!-5</td>\n",
       "      <td>58</td>\n",
       "      <td>Once a year</td>\n",
       "      <td>Male</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>+1</td>\n",
       "      <td>32</td>\n",
       "      <td>Every three months</td>\n",
       "      <td>Female</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  yummy convenient spicy fattening greasy fast cheap tasty expensive healthy  \\\n",
       "0    No        Yes    No       Yes     No  Yes   Yes    No       Yes      No   \n",
       "1   Yes        Yes    No       Yes    Yes  Yes   Yes   Yes       Yes      No   \n",
       "2    No        Yes   Yes       Yes    Yes  Yes    No   Yes       Yes     Yes   \n",
       "3   Yes        Yes    No       Yes    Yes  Yes   Yes   Yes        No      No   \n",
       "4    No        Yes    No       Yes    Yes  Yes   Yes    No        No     Yes   \n",
       "5   Yes        Yes    No       Yes     No  Yes   Yes   Yes        No      No   \n",
       "6   Yes        Yes   Yes       Yes     No  Yes    No   Yes       Yes     Yes   \n",
       "7   Yes        Yes    No       Yes    Yes  Yes   Yes   Yes        No      No   \n",
       "8    No         No    No       Yes    Yes   No    No    No       Yes      No   \n",
       "9   Yes        Yes    No       Yes    Yes  Yes    No   Yes       Yes      No   \n",
       "\n",
       "  disgusting          Like  Age      VisitFrequency  Gender  \n",
       "0         No            -3   61  Every three months  Female  \n",
       "1         No            +2   51  Every three months  Female  \n",
       "2         No            +1   62  Every three months  Female  \n",
       "3        Yes            +4   69         Once a week  Female  \n",
       "4         No            +2   49        Once a month    Male  \n",
       "5         No            +2   55  Every three months    Male  \n",
       "6         No            +2   56  Every three months  Female  \n",
       "7         No  I love it!+5   23         Once a week  Female  \n",
       "8        Yes  I hate it!-5   58         Once a year    Male  \n",
       "9         No            +1   32  Every three months  Female  "
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Preview the top 10 rows\n",
    "df.head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "6f9949f3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1453, 15)"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# find rows and columns count\n",
    "df.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "ee58b2cc",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 1453 entries, 0 to 1452\n",
      "Data columns (total 15 columns):\n",
      " #   Column          Non-Null Count  Dtype \n",
      "---  ------          --------------  ----- \n",
      " 0   yummy           1453 non-null   object\n",
      " 1   convenient      1453 non-null   object\n",
      " 2   spicy           1453 non-null   object\n",
      " 3   fattening       1453 non-null   object\n",
      " 4   greasy          1453 non-null   object\n",
      " 5   fast            1453 non-null   object\n",
      " 6   cheap           1453 non-null   object\n",
      " 7   tasty           1453 non-null   object\n",
      " 8   expensive       1453 non-null   object\n",
      " 9   healthy         1453 non-null   object\n",
      " 10  disgusting      1453 non-null   object\n",
      " 11  Like            1453 non-null   object\n",
      " 12  Age             1453 non-null   int64 \n",
      " 13  VisitFrequency  1453 non-null   object\n",
      " 14  Gender          1453 non-null   object\n",
      "dtypes: int64(1), object(14)\n",
      "memory usage: 170.4+ KB\n"
     ]
    }
   ],
   "source": [
    "# see dataset info\n",
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "da4d4cc9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "yummy             False\n",
       "convenient        False\n",
       "spicy             False\n",
       "fattening         False\n",
       "greasy            False\n",
       "fast              False\n",
       "cheap             False\n",
       "tasty             False\n",
       "expensive         False\n",
       "healthy           False\n",
       "disgusting        False\n",
       "Like              False\n",
       "Age               False\n",
       "VisitFrequency    False\n",
       "Gender            False\n",
       "dtype: bool"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.isnull().any()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "fd61e134",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['yummy',\n",
       " 'convenient',\n",
       " 'spicy',\n",
       " 'fattening',\n",
       " 'greasy',\n",
       " 'fast',\n",
       " 'cheap',\n",
       " 'tasty',\n",
       " 'expensive',\n",
       " 'healthy',\n",
       " 'disgusting',\n",
       " 'Like',\n",
       " 'VisitFrequency',\n",
       " 'Gender']"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#define categorical columns\n",
    "cat_cols = list(df.select_dtypes('object'))\n",
    "cat_cols"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "002934f0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['Age']"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#define numerical columns\n",
    "num_cols = list(df.select_dtypes(['int64','float64']))\n",
    "num_cols"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "c0d8b501",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['Age']"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# define numerical predictors\n",
    "num_pred = num_cols\n",
    "num_pred"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "96444323",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>feature</th>\n",
       "      <th>count</th>\n",
       "      <th>mean</th>\n",
       "      <th>std</th>\n",
       "      <th>min</th>\n",
       "      <th>25%</th>\n",
       "      <th>50%</th>\n",
       "      <th>75%</th>\n",
       "      <th>max</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Age</td>\n",
       "      <td>1453.0</td>\n",
       "      <td>44.604955</td>\n",
       "      <td>14.221178</td>\n",
       "      <td>18.0</td>\n",
       "      <td>33.0</td>\n",
       "      <td>45.0</td>\n",
       "      <td>57.0</td>\n",
       "      <td>71.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  feature   count       mean        std   min   25%   50%   75%   max\n",
       "0     Age  1453.0  44.604955  14.221178  18.0  33.0  45.0  57.0  71.0"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# describe the statistics of numerical predictors\n",
    "num_stat = df[num_pred].describe().transpose().reset_index()\n",
    "num_stat.rename(columns={'index': 'feature'}, inplace=True)\n",
    "num_stat"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "28a91db1",
   "metadata": {},
   "source": [
    "# Step 1: Deciding  to Segment\n",
    "McDonald’s can take the position that it caters to the entire market and thatthere is no need to understand systematic differences across market segments.Alternatively, McDonald’s can take the position that, despite their market power,here is value in investigating systematic heterogeneity among consumers and harvest these differences using a differentiated marketing strategy."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "04d6cee9",
   "metadata": {},
   "outputs": [],
   "source": [
    "step 2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "91724a1f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.histplot(df, x=\"VisitFrequency\", kde=True, color='red')\n",
    "plt.xlabel(\"Frequency of Visit\", color= 'green' )\n",
    "plt.ylabel(\"Number of People\", color= 'green')\n",
    "plt.xticks(rotation=30)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9f8de634",
   "metadata": {},
   "source": [
    " Interpretations:\n",
    "most of the the peoples prefers McDonald\n",
    "large number of peoples visits mcDonalds within a month and very few more than once a week"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d45038d7",
   "metadata": {},
   "source": [
    "# Step 3: Data Identification\n",
    "The data set contains responses from 1453 adult Australian consumers relating to their perceptions of McDonald's with respect to the following attributes: YUMMY, CONVENIENT, SPICY, FATTENING, GREASY, FAST, CHEAP, TASTY, EXPENSIVE, HEALTHY, and DISGUSTING. These attributes emerged from a qualitative study conducted in preparation of the survey study. For each of those attributes, respondents provided either a YES response (indicating that they feel McDonald's possesses this attribute), or a NO response (indicating that McDonald's does not possess this attribute).\n",
    "\n",
    "In addition, respondents indicated their AGE and GENDER. Had this data been collected for a real market segmentation study, additional information - such as details about their dining out behaviour, and their use of information channels - would have been collected to enable the development of a richer and more detailed description of each market segment."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b75d68f5",
   "metadata": {},
   "source": [
    "# Step 4: Exploring and Cleaning Data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "71f3e66a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>yummy</th>\n",
       "      <th>convenient</th>\n",
       "      <th>spicy</th>\n",
       "      <th>fattening</th>\n",
       "      <th>greasy</th>\n",
       "      <th>fast</th>\n",
       "      <th>cheap</th>\n",
       "      <th>tasty</th>\n",
       "      <th>expensive</th>\n",
       "      <th>healthy</th>\n",
       "      <th>disgusting</th>\n",
       "      <th>Like</th>\n",
       "      <th>Age</th>\n",
       "      <th>VisitFrequency</th>\n",
       "      <th>Gender</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>No</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>-3</td>\n",
       "      <td>61</td>\n",
       "      <td>Every three months</td>\n",
       "      <td>Female</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>+2</td>\n",
       "      <td>51</td>\n",
       "      <td>Every three months</td>\n",
       "      <td>Female</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>No</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>+1</td>\n",
       "      <td>62</td>\n",
       "      <td>Every three months</td>\n",
       "      <td>Female</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>Yes</td>\n",
       "      <td>+4</td>\n",
       "      <td>69</td>\n",
       "      <td>Once a week</td>\n",
       "      <td>Female</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>No</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>+2</td>\n",
       "      <td>49</td>\n",
       "      <td>Once a month</td>\n",
       "      <td>Male</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  yummy convenient spicy fattening greasy fast cheap tasty expensive healthy  \\\n",
       "0    No        Yes    No       Yes     No  Yes   Yes    No       Yes      No   \n",
       "1   Yes        Yes    No       Yes    Yes  Yes   Yes   Yes       Yes      No   \n",
       "2    No        Yes   Yes       Yes    Yes  Yes    No   Yes       Yes     Yes   \n",
       "3   Yes        Yes    No       Yes    Yes  Yes   Yes   Yes        No      No   \n",
       "4    No        Yes    No       Yes    Yes  Yes   Yes    No        No     Yes   \n",
       "\n",
       "  disgusting Like  Age      VisitFrequency  Gender  \n",
       "0         No   -3   61  Every three months  Female  \n",
       "1         No   +2   51  Every three months  Female  \n",
       "2         No   +1   62  Every three months  Female  \n",
       "3        Yes   +4   69         Once a week  Female  \n",
       "4         No   +2   49        Once a month    Male  "
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "62c5db7a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 1453 entries, 0 to 1452\n",
      "Data columns (total 15 columns):\n",
      " #   Column          Non-Null Count  Dtype \n",
      "---  ------          --------------  ----- \n",
      " 0   yummy           1453 non-null   object\n",
      " 1   convenient      1453 non-null   object\n",
      " 2   spicy           1453 non-null   object\n",
      " 3   fattening       1453 non-null   object\n",
      " 4   greasy          1453 non-null   object\n",
      " 5   fast            1453 non-null   object\n",
      " 6   cheap           1453 non-null   object\n",
      " 7   tasty           1453 non-null   object\n",
      " 8   expensive       1453 non-null   object\n",
      " 9   healthy         1453 non-null   object\n",
      " 10  disgusting      1453 non-null   object\n",
      " 11  Like            1453 non-null   object\n",
      " 12  Age             1453 non-null   int64 \n",
      " 13  VisitFrequency  1453 non-null   object\n",
      " 14  Gender          1453 non-null   object\n",
      "dtypes: int64(1), object(14)\n",
      "memory usage: 170.4+ KB\n"
     ]
    }
   ],
   "source": [
    "# see dataset info\n",
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "99d9e322",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>yummy</th>\n",
       "      <th>convenient</th>\n",
       "      <th>spicy</th>\n",
       "      <th>fattening</th>\n",
       "      <th>greasy</th>\n",
       "      <th>fast</th>\n",
       "      <th>cheap</th>\n",
       "      <th>tasty</th>\n",
       "      <th>expensive</th>\n",
       "      <th>healthy</th>\n",
       "      <th>disgusting</th>\n",
       "      <th>Like</th>\n",
       "      <th>Age</th>\n",
       "      <th>VisitFrequency</th>\n",
       "      <th>Gender</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>-3</td>\n",
       "      <td>61</td>\n",
       "      <td>Every three months</td>\n",
       "      <td>Female</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>+2</td>\n",
       "      <td>51</td>\n",
       "      <td>Every three months</td>\n",
       "      <td>Female</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>+1</td>\n",
       "      <td>62</td>\n",
       "      <td>Every three months</td>\n",
       "      <td>Female</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>+4</td>\n",
       "      <td>69</td>\n",
       "      <td>Once a week</td>\n",
       "      <td>Female</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>+2</td>\n",
       "      <td>49</td>\n",
       "      <td>Once a month</td>\n",
       "      <td>Male</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   yummy  convenient  spicy  fattening  greasy  fast  cheap  tasty  expensive  \\\n",
       "0      0           1      0          1       0     1      1      0          1   \n",
       "1      1           1      0          1       1     1      1      1          1   \n",
       "2      0           1      1          1       1     1      0      1          1   \n",
       "3      1           1      0          1       1     1      1      1          0   \n",
       "4      0           1      0          1       1     1      1      0          0   \n",
       "\n",
       "   healthy  disgusting Like  Age      VisitFrequency  Gender  \n",
       "0        0           0   -3   61  Every three months  Female  \n",
       "1        0           0   +2   51  Every three months  Female  \n",
       "2        1           0   +1   62  Every three months  Female  \n",
       "3        0           1   +4   69         Once a week  Female  \n",
       "4        1           0   +2   49        Once a month    Male  "
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#replace binaray variables to numeric\n",
    "df.replace(['Yes','No'],[1,0],inplace=True)\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "52adcb7f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "+3              229\n",
       "+2              187\n",
       "0               169\n",
       "+4              160\n",
       "+1              152\n",
       "I hate it!-5    152\n",
       "I love it!+5    143\n",
       "-3               73\n",
       "-4               71\n",
       "-2               59\n",
       "-1               58\n",
       "Name: Like, dtype: int64"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.Like.value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "85504334",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>yummy</th>\n",
       "      <th>convenient</th>\n",
       "      <th>spicy</th>\n",
       "      <th>fattening</th>\n",
       "      <th>greasy</th>\n",
       "      <th>fast</th>\n",
       "      <th>cheap</th>\n",
       "      <th>tasty</th>\n",
       "      <th>expensive</th>\n",
       "      <th>healthy</th>\n",
       "      <th>disgusting</th>\n",
       "      <th>Like</th>\n",
       "      <th>Age</th>\n",
       "      <th>VisitFrequency</th>\n",
       "      <th>Gender</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>61</td>\n",
       "      <td>Every three months</td>\n",
       "      <td>Female</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>7</td>\n",
       "      <td>51</td>\n",
       "      <td>Every three months</td>\n",
       "      <td>Female</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>6</td>\n",
       "      <td>62</td>\n",
       "      <td>Every three months</td>\n",
       "      <td>Female</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>9</td>\n",
       "      <td>69</td>\n",
       "      <td>Once a week</td>\n",
       "      <td>Female</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>7</td>\n",
       "      <td>49</td>\n",
       "      <td>Once a month</td>\n",
       "      <td>Male</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   yummy  convenient  spicy  fattening  greasy  fast  cheap  tasty  expensive  \\\n",
       "0      0           1      0          1       0     1      1      0          1   \n",
       "1      1           1      0          1       1     1      1      1          1   \n",
       "2      0           1      1          1       1     1      0      1          1   \n",
       "3      1           1      0          1       1     1      1      1          0   \n",
       "4      0           1      0          1       1     1      1      0          0   \n",
       "\n",
       "   healthy  disgusting  Like  Age      VisitFrequency  Gender  \n",
       "0        0           0     2   61  Every three months  Female  \n",
       "1        0           0     7   51  Every three months  Female  \n",
       "2        1           0     6   62  Every three months  Female  \n",
       "3        0           1     9   69         Once a week  Female  \n",
       "4        1           0     7   49        Once a month    Male  "
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Normalizing the values of like in the range of 0 to 10\n",
    "df.Like = df.Like.replace(['I hate it!-5','I love it!+5'],['-5','+5']).astype('int64') + 5\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "15c9d0e2",
   "metadata": {},
   "source": [
    "# Principal component analysis\n",
    "Another way of exploring data initially is to compute a principal components\n",
    "analysis, and create a perceptual map. A perceptual map offers initial insights into\n",
    "how attributes are rated by respondents and, importantly, which attributes tend to be\n",
    "rated in the same way. Principal components analysis is not computed to reduce the\n",
    "number of variables. This approach  also referred to as factor cluster analysis is\n",
    "inferior to clustering raw data in most instances (Dolnicar and Grün 2008). Here, we\n",
    "calculate principal components because we use the resulting components to rotate\n",
    "and project the data for the perceptual map. We use unstandardised data because our\n",
    "segmentation variables are all binary"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "dd10bcb6",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.decomposition import PCA\n",
    "pca = PCA()\n",
    "# Excluding Non Binary elements\n",
    "transformed_data = pca.fit_transform(df.iloc[:, :-4])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "91a69331",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0.29944723, 0.49224445, 0.6252898 , 0.70838558, 0.7678661 ,\n",
       "       0.81816566, 0.86201476, 0.90156255, 0.93832345, 0.97067674,\n",
       "       1.        ])"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pca.explained_variance_ratio_.cumsum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "4ac16668",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PC1</th>\n",
       "      <th>PC2</th>\n",
       "      <th>PC3</th>\n",
       "      <th>PC4</th>\n",
       "      <th>PC5</th>\n",
       "      <th>PC6</th>\n",
       "      <th>PC7</th>\n",
       "      <th>PC8</th>\n",
       "      <th>PC9</th>\n",
       "      <th>PC10</th>\n",
       "      <th>PC11</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>yummy</th>\n",
       "      <td>-0.476933</td>\n",
       "      <td>0.363790</td>\n",
       "      <td>-0.304444</td>\n",
       "      <td>0.055162</td>\n",
       "      <td>-0.307535</td>\n",
       "      <td>0.170738</td>\n",
       "      <td>-0.280519</td>\n",
       "      <td>0.013041</td>\n",
       "      <td>0.572403</td>\n",
       "      <td>-0.110284</td>\n",
       "      <td>0.045439</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>convenient</th>\n",
       "      <td>-0.155332</td>\n",
       "      <td>0.016414</td>\n",
       "      <td>-0.062515</td>\n",
       "      <td>-0.142425</td>\n",
       "      <td>0.277608</td>\n",
       "      <td>-0.347830</td>\n",
       "      <td>-0.059738</td>\n",
       "      <td>-0.113079</td>\n",
       "      <td>-0.018465</td>\n",
       "      <td>-0.665818</td>\n",
       "      <td>-0.541616</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>spicy</th>\n",
       "      <td>-0.006356</td>\n",
       "      <td>0.018809</td>\n",
       "      <td>-0.037019</td>\n",
       "      <td>0.197619</td>\n",
       "      <td>0.070620</td>\n",
       "      <td>-0.355087</td>\n",
       "      <td>0.707637</td>\n",
       "      <td>0.375934</td>\n",
       "      <td>0.400280</td>\n",
       "      <td>-0.075634</td>\n",
       "      <td>0.141730</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fattening</th>\n",
       "      <td>0.116232</td>\n",
       "      <td>-0.034094</td>\n",
       "      <td>-0.322359</td>\n",
       "      <td>-0.354139</td>\n",
       "      <td>-0.073405</td>\n",
       "      <td>-0.406515</td>\n",
       "      <td>-0.385943</td>\n",
       "      <td>0.589622</td>\n",
       "      <td>-0.160512</td>\n",
       "      <td>-0.005338</td>\n",
       "      <td>0.250910</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>greasy</th>\n",
       "      <td>0.304443</td>\n",
       "      <td>-0.063839</td>\n",
       "      <td>-0.802373</td>\n",
       "      <td>0.253960</td>\n",
       "      <td>0.361399</td>\n",
       "      <td>0.209347</td>\n",
       "      <td>0.036170</td>\n",
       "      <td>-0.138241</td>\n",
       "      <td>-0.002847</td>\n",
       "      <td>0.008707</td>\n",
       "      <td>0.001642</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fast</th>\n",
       "      <td>-0.108493</td>\n",
       "      <td>-0.086972</td>\n",
       "      <td>-0.064642</td>\n",
       "      <td>-0.097363</td>\n",
       "      <td>0.107930</td>\n",
       "      <td>-0.594632</td>\n",
       "      <td>-0.086846</td>\n",
       "      <td>-0.627799</td>\n",
       "      <td>0.166197</td>\n",
       "      <td>0.239532</td>\n",
       "      <td>0.339265</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>cheap</th>\n",
       "      <td>-0.337186</td>\n",
       "      <td>-0.610633</td>\n",
       "      <td>-0.149310</td>\n",
       "      <td>0.118958</td>\n",
       "      <td>-0.128973</td>\n",
       "      <td>-0.103241</td>\n",
       "      <td>-0.040449</td>\n",
       "      <td>0.140060</td>\n",
       "      <td>0.076069</td>\n",
       "      <td>0.428087</td>\n",
       "      <td>-0.489283</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>tasty</th>\n",
       "      <td>-0.471514</td>\n",
       "      <td>0.307318</td>\n",
       "      <td>-0.287265</td>\n",
       "      <td>-0.002547</td>\n",
       "      <td>-0.210899</td>\n",
       "      <td>-0.076914</td>\n",
       "      <td>0.360453</td>\n",
       "      <td>-0.072792</td>\n",
       "      <td>-0.639086</td>\n",
       "      <td>0.079184</td>\n",
       "      <td>0.019552</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>expensive</th>\n",
       "      <td>0.329042</td>\n",
       "      <td>0.601286</td>\n",
       "      <td>0.024397</td>\n",
       "      <td>0.067816</td>\n",
       "      <td>-0.003125</td>\n",
       "      <td>-0.261342</td>\n",
       "      <td>-0.068385</td>\n",
       "      <td>0.029539</td>\n",
       "      <td>0.066996</td>\n",
       "      <td>0.454399</td>\n",
       "      <td>-0.490069</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>healthy</th>\n",
       "      <td>-0.213711</td>\n",
       "      <td>0.076593</td>\n",
       "      <td>0.192051</td>\n",
       "      <td>0.763488</td>\n",
       "      <td>0.287846</td>\n",
       "      <td>-0.178226</td>\n",
       "      <td>-0.349616</td>\n",
       "      <td>0.176303</td>\n",
       "      <td>-0.185572</td>\n",
       "      <td>-0.038117</td>\n",
       "      <td>0.157608</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>disgusting</th>\n",
       "      <td>0.374753</td>\n",
       "      <td>-0.139656</td>\n",
       "      <td>-0.088571</td>\n",
       "      <td>0.369539</td>\n",
       "      <td>-0.729209</td>\n",
       "      <td>-0.210878</td>\n",
       "      <td>-0.026792</td>\n",
       "      <td>-0.167181</td>\n",
       "      <td>-0.072483</td>\n",
       "      <td>-0.289592</td>\n",
       "      <td>-0.040662</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                 PC1       PC2       PC3       PC4       PC5       PC6  \\\n",
       "yummy      -0.476933  0.363790 -0.304444  0.055162 -0.307535  0.170738   \n",
       "convenient -0.155332  0.016414 -0.062515 -0.142425  0.277608 -0.347830   \n",
       "spicy      -0.006356  0.018809 -0.037019  0.197619  0.070620 -0.355087   \n",
       "fattening   0.116232 -0.034094 -0.322359 -0.354139 -0.073405 -0.406515   \n",
       "greasy      0.304443 -0.063839 -0.802373  0.253960  0.361399  0.209347   \n",
       "fast       -0.108493 -0.086972 -0.064642 -0.097363  0.107930 -0.594632   \n",
       "cheap      -0.337186 -0.610633 -0.149310  0.118958 -0.128973 -0.103241   \n",
       "tasty      -0.471514  0.307318 -0.287265 -0.002547 -0.210899 -0.076914   \n",
       "expensive   0.329042  0.601286  0.024397  0.067816 -0.003125 -0.261342   \n",
       "healthy    -0.213711  0.076593  0.192051  0.763488  0.287846 -0.178226   \n",
       "disgusting  0.374753 -0.139656 -0.088571  0.369539 -0.729209 -0.210878   \n",
       "\n",
       "                 PC7       PC8       PC9      PC10      PC11  \n",
       "yummy      -0.280519  0.013041  0.572403 -0.110284  0.045439  \n",
       "convenient -0.059738 -0.113079 -0.018465 -0.665818 -0.541616  \n",
       "spicy       0.707637  0.375934  0.400280 -0.075634  0.141730  \n",
       "fattening  -0.385943  0.589622 -0.160512 -0.005338  0.250910  \n",
       "greasy      0.036170 -0.138241 -0.002847  0.008707  0.001642  \n",
       "fast       -0.086846 -0.627799  0.166197  0.239532  0.339265  \n",
       "cheap      -0.040449  0.140060  0.076069  0.428087 -0.489283  \n",
       "tasty       0.360453 -0.072792 -0.639086  0.079184  0.019552  \n",
       "expensive  -0.068385  0.029539  0.066996  0.454399 -0.490069  \n",
       "healthy    -0.349616  0.176303 -0.185572 -0.038117  0.157608  \n",
       "disgusting -0.026792 -0.167181 -0.072483 -0.289592 -0.040662  "
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "comps = pd.DataFrame(pca.components_.T, columns=[f\"PC{i+1}\" for i in range(11)], index=df.columns[:-4])\n",
    "comps"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "a236a688",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.scatter(transformed_data[:, 0], transformed_data[:, 1], color='yellow')\n",
    "plt.xlabel('PC1')\n",
    "plt.ylabel('PC2')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7ade9671",
   "metadata": {},
   "source": [
    "# Step 5: Extracting Segments\n",
    "Step 5 is where we extract segments. To illustrate a range of extraction techniques,\n",
    "we subdivide this step into three sections. In the first section, we will use standard\n",
    "k-means analysis. In the second section, we will use finite mixtures of binary\n",
    "distributions. In the third section, we will use finite mixtures of regressions."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "13de282b",
   "metadata": {},
   "source": [
    "# Step 6: Profiling Segments"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "d123923c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 1453 entries, 0 to 1452\n",
      "Data columns (total 15 columns):\n",
      " #   Column          Non-Null Count  Dtype \n",
      "---  ------          --------------  ----- \n",
      " 0   yummy           1453 non-null   int64 \n",
      " 1   convenient      1453 non-null   int64 \n",
      " 2   spicy           1453 non-null   int64 \n",
      " 3   fattening       1453 non-null   int64 \n",
      " 4   greasy          1453 non-null   int64 \n",
      " 5   fast            1453 non-null   int64 \n",
      " 6   cheap           1453 non-null   int64 \n",
      " 7   tasty           1453 non-null   int64 \n",
      " 8   expensive       1453 non-null   int64 \n",
      " 9   healthy         1453 non-null   int64 \n",
      " 10  disgusting      1453 non-null   int64 \n",
      " 11  Like            1453 non-null   int64 \n",
      " 12  Age             1453 non-null   int64 \n",
      " 13  VisitFrequency  1453 non-null   object\n",
      " 14  Gender          1453 non-null   object\n",
      "dtypes: int64(13), object(2)\n",
      "memory usage: 170.4+ KB\n"
     ]
    }
   ],
   "source": [
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "6304fdbb",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>yummy</th>\n",
       "      <th>convenient</th>\n",
       "      <th>spicy</th>\n",
       "      <th>fattening</th>\n",
       "      <th>greasy</th>\n",
       "      <th>fast</th>\n",
       "      <th>cheap</th>\n",
       "      <th>tasty</th>\n",
       "      <th>expensive</th>\n",
       "      <th>healthy</th>\n",
       "      <th>disgusting</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1448</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1449</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1450</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1451</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1452</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1453 rows × 11 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      yummy  convenient  spicy  fattening  greasy  fast  cheap  tasty  \\\n",
       "0         0           1      0          1       0     1      1      0   \n",
       "1         1           1      0          1       1     1      1      1   \n",
       "2         0           1      1          1       1     1      0      1   \n",
       "3         1           1      0          1       1     1      1      1   \n",
       "4         0           1      0          1       1     1      1      0   \n",
       "...     ...         ...    ...        ...     ...   ...    ...    ...   \n",
       "1448      0           1      0          1       1     0      0      0   \n",
       "1449      1           1      0          1       0     0      1      1   \n",
       "1450      1           1      0          1       0     1      0      1   \n",
       "1451      1           1      0          0       0     1      1      1   \n",
       "1452      0           1      0          1       1     0      0      0   \n",
       "\n",
       "      expensive  healthy  disgusting  \n",
       "0             1        0           0  \n",
       "1             1        0           0  \n",
       "2             1        1           0  \n",
       "3             0        0           1  \n",
       "4             0        1           0  \n",
       "...         ...      ...         ...  \n",
       "1448          1        0           1  \n",
       "1449          0        1           0  \n",
       "1450          1        0           0  \n",
       "1451          0        1           0  \n",
       "1452          1        0           1  \n",
       "\n",
       "[1453 rows x 11 columns]"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_bin = df.iloc[:, :11]  # deleting like age gender \n",
    "df_bin"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "503f0c04",
   "metadata": {},
   "outputs": [
    {
     "ename": "ModuleNotFoundError",
     "evalue": "No module named 'yellowbrick'",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mModuleNotFoundError\u001b[0m                       Traceback (most recent call last)",
      "\u001b[1;32m~\\AppData\\Local\\Temp/ipykernel_2744/3138733845.py\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[0;32m      1\u001b[0m \u001b[1;32mfrom\u001b[0m \u001b[0msklearn\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mcluster\u001b[0m \u001b[1;32mimport\u001b[0m \u001b[0mKMeans\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m----> 2\u001b[1;33m \u001b[1;32mfrom\u001b[0m \u001b[0myellowbrick\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mcluster\u001b[0m \u001b[1;32mimport\u001b[0m \u001b[0mKElbowVisualizer\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m      3\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      4\u001b[0m \u001b[0mkmeans\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mKMeans\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      5\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;31mModuleNotFoundError\u001b[0m: No module named 'yellowbrick'"
     ]
    }
   ],
   "source": [
    "from sklearn.cluster import KMeans\n",
    "from yellowbrick.cluster import KElbowVisualizer\n",
    "\n",
    "kmeans = KMeans()\n",
    "\n",
    "vis = KElbowVisualizer(kmeans, k=(1, 12)).fit(df_bin)\n",
    "vis.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "e1d7a6dc",
   "metadata": {},
   "outputs": [],
   "source": [
    "kmeans = KMeans(4, init='k-means++', random_state=42).fit(df_bin)\n",
    "df['cluster_number'] = kmeans.labels_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "cfeffc93",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "from sklearn.decomposition import PCA\n",
    "from sklearn import preprocessing\n",
    "x = df_bin.values\n",
    "pca_data = preprocessing.scale(x)\n",
    "pca = PCA(n_components=11)\n",
    "pc = pca.fit_transform(x)\n",
    "\n",
    "pf = pd.DataFrame(data=pc, columns=[f\"PC{i+1}\" for i in range(11)])\n",
    "sns.scatterplot(data=pf, x='PC1', y='PC2', hue=kmeans.labels_)\n",
    "plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], marker='X', c=\"r\", s=80, label='centroids')\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f0237b86",
   "metadata": {},
   "source": [
    "# Step 7: Describing Segments \n",
    "The fast food data set is not typical for data collected for market segmentation\n",
    "analysis because it contains very few descriptor variables. Descriptor variables\n",
    "– additional pieces of information about consumers – are critically important to\n",
    "gaining a good understanding of market segments. One descriptor variable available\n",
    "in the fast food data set is the extent to which consumers love or hate McDonald’s.\n",
    "Using a simple mosaic plot, we can visualise the association between segment\n",
    "membership and loving or hating McDonald’s."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "e0d543a4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>Like</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "      <th>5</th>\n",
       "      <th>6</th>\n",
       "      <th>7</th>\n",
       "      <th>8</th>\n",
       "      <th>9</th>\n",
       "      <th>10</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>cluster_number</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>6</td>\n",
       "      <td>13</td>\n",
       "      <td>43</td>\n",
       "      <td>65</td>\n",
       "      <td>90</td>\n",
       "      <td>143</td>\n",
       "      <td>111</td>\n",
       "      <td>99</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>28</td>\n",
       "      <td>30</td>\n",
       "      <td>19</td>\n",
       "      <td>13</td>\n",
       "      <td>39</td>\n",
       "      <td>14</td>\n",
       "      <td>6</td>\n",
       "      <td>8</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>7</td>\n",
       "      <td>6</td>\n",
       "      <td>7</td>\n",
       "      <td>36</td>\n",
       "      <td>42</td>\n",
       "      <td>60</td>\n",
       "      <td>66</td>\n",
       "      <td>47</td>\n",
       "      <td>44</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>36</td>\n",
       "      <td>34</td>\n",
       "      <td>28</td>\n",
       "      <td>25</td>\n",
       "      <td>51</td>\n",
       "      <td>31</td>\n",
       "      <td>31</td>\n",
       "      <td>12</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Like            1   2   3   4   5   6   7    8    9   10\n",
       "cluster_number                                          \n",
       "0                4   2   6  13  43  65  90  143  111  99\n",
       "1               28  30  19  13  39  14   6    8    0   0\n",
       "2                3   7   6   7  36  42  60   66   47  44\n",
       "3               36  34  28  25  51  31  31   12    2   0"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from statsmodels.graphics.mosaicplot import mosaic\n",
    "from itertools import product\n",
    "\n",
    "# Like Crosstab\n",
    "cross = pd.crosstab(df['cluster_number'], df['Like'])\n",
    "cross = cross[list(np.arange(10) + 1)]\n",
    "cross"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "de2ce0fc",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 3 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "mosaic(cross.stack())\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "3382ea62",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>Gender</th>\n",
       "      <th>Female</th>\n",
       "      <th>Male</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>cluster_number</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>349</td>\n",
       "      <td>231</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>106</td>\n",
       "      <td>140</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>154</td>\n",
       "      <td>169</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>179</td>\n",
       "      <td>125</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Gender          Female  Male\n",
       "cluster_number              \n",
       "0                  349   231\n",
       "1                  106   140\n",
       "2                  154   169\n",
       "3                  179   125"
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Gender Crosstab\n",
    "cross_gender = pd.crosstab(df['cluster_number'], df['Gender'])\n",
    "cross_gender"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "52b44b3a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 3 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "mosaic(cross_gender.stack())\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "29c6b0ed",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='cluster_number', ylabel='Age'>"
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.boxplot(x='cluster_number', y='Age', data=df)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2cbfe4df",
   "metadata": {},
   "source": [
    "# Step 8: Selecting Target Segment\n",
    "Using the knock-out criteria and segment attractiveness criteria specified in Step 2,\n",
    "users of the market segmentation (McDonald’s managers) can now proceed to\n",
    "develop a segment evaluation plot"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "14b2cca3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>cluster_number</th>\n",
       "      <th>VisitFrequency</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>2.584483</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>2.654472</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>2.547988</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>2.822368</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   cluster_number  VisitFrequency\n",
       "0               0        2.584483\n",
       "1               1        2.654472\n",
       "2               2        2.547988\n",
       "3               3        2.822368"
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.preprocessing import LabelEncoder\n",
    "\n",
    "df['VisitFrequency'] = LabelEncoder().fit_transform(df['VisitFrequency'])\n",
    "visit = df.groupby('cluster_number')['VisitFrequency'].mean()\n",
    "visit = visit.to_frame().reset_index()\n",
    "visit"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "5979eff0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>cluster_number</th>\n",
       "      <th>Like</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>7.665517</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>2.365854</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>7.139319</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>3.486842</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   cluster_number      Like\n",
       "0               0  7.665517\n",
       "1               1  2.365854\n",
       "2               2  7.139319\n",
       "3               3  3.486842"
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['Like'] = LabelEncoder().fit_transform(df['Like'])\n",
    "Like = df.groupby('cluster_number')['Like'].mean()\n",
    "Like = Like.to_frame().reset_index()\n",
    "Like"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "1f74871b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>cluster_number</th>\n",
       "      <th>Gender</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>0.398276</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>0.569106</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>0.523220</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>0.411184</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   cluster_number    Gender\n",
       "0               0  0.398276\n",
       "1               1  0.569106\n",
       "2               2  0.523220\n",
       "3               3  0.411184"
      ]
     },
     "execution_count": 50,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['Gender'] = LabelEncoder().fit_transform(df['Gender'])\n",
    "Gender = df.groupby('cluster_number')['Gender'].mean()\n",
    "Gender = Gender.to_frame().reset_index()\n",
    "Gender"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "d103f3e0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>cluster_number</th>\n",
       "      <th>Gender</th>\n",
       "      <th>Like</th>\n",
       "      <th>VisitFrequency</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>0.398276</td>\n",
       "      <td>7.665517</td>\n",
       "      <td>2.584483</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>0.569106</td>\n",
       "      <td>2.365854</td>\n",
       "      <td>2.654472</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>0.523220</td>\n",
       "      <td>7.139319</td>\n",
       "      <td>2.547988</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>0.411184</td>\n",
       "      <td>3.486842</td>\n",
       "      <td>2.822368</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   cluster_number    Gender      Like  VisitFrequency\n",
       "0               0  0.398276  7.665517        2.584483\n",
       "1               1  0.569106  2.365854        2.654472\n",
       "2               2  0.523220  7.139319        2.547988\n",
       "3               3  0.411184  3.486842        2.822368"
      ]
     },
     "execution_count": 51,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "segment = Gender.merge(Like, on='cluster_number', how='left').merge(visit, on='cluster_number', how='left')\n",
    "segment"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "9a60d720",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.scatterplot(x = \"VisitFrequency\", y = \"Like\",data=segment,s=400, color=\"green\")\n",
    "plt.title(\"Simple segment evaluation plot for the fast food data set\", fontsize = 15) \n",
    "plt.xlabel(\"Visit\", fontsize = 12) \n",
    "plt.ylabel(\"Like\", fontsize = 12) \n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "62ce9d6c",
   "metadata": {},
   "source": [
    "# Step 9: Market Mix Customization\n",
    "In Step 9 the marketing mix is designed. If, for example, McDonald's managers decide to focus on segment 3 (young customers who like McDonald's, think the food is yummy and tasty, but perceive it as pretty expensive), they could choose to offer a MCSUPERBUDGET line to cater specifically to the price expectations of this segment (4Ps: Price). The advantage of such an approach might be that members of segment 3 develop to become loyal customers who, as they start earning more money, will not care about the price any more and move to the regular McDonald's range of products. To not cannibalise the main range, the product features of the MCSUPERBUDGET range would have to be distinctly different (4Ps: Product). Next, communication channels would have to be identified which are heavily used by members of segment 3 to communicate the availability of the MCSUPERBUDGET line (4Ps: Promotion). Distribution channels (4Ps: Place) would have to be the same given that all McDonald's food is sold in McDonald's outlets. But McDonald's management could consider having a MCSUPERBUDGET lane where the wait in the queue might be slightly longer in an attempt not to cannibalise the main product line."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0205bf2c",
   "metadata": {},
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "8ee27cc3",
   "metadata": {},
   "source": [
    "# Step 10: Evaluation and Monitoring\n",
    "After the market segmentation analysis is completed, and all strategic and tactical marketing activities have been undertaken, the success of the market segmentation strategy has to be evaluated, and the market must be carefully monitored on a continuous basis. It is possible, for example, that members of segment 3 start earning more money and the MCSUPERBUDGET line is no longer suitable for them. Changes can occur within existing market segments. But changes can also occur in the larger marketplace, for example, if new competitors enter the market. All potential sources of change have to be monitored in order to detect changes which require McDonald's management to adjust their strategic or tactical marketing in view of new market circumstances."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5019daa8",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
